import React, { useState } from 'react';
import { useVehiclesManagement } from '../../components/admin/vehicles/hooks/vehiclesHook';
import ModalAgregarVehiculo from '../../components/admin/vehicles/ModalAgregarVehiculo';
import { ModalDetallesVehiculo } from '../../components/admin/vehicles/ModalDetallesVehiculo';
import ModalEditarVehiculo from '../../components/admin/vehicles/ModalEditarVehiculo';
import TablaVehiculos from '../../components/admin/vehicles/TablaVehiculos';
import Alert from '../../components/ui/alert/Alert';
import Button from '../../components/ui/button/Button';
import { EstadoVehiculo, TipoVehiculo, Vehiculo } from '../../global/types/vehiclesType';
import { Plus, Truck, Filter } from 'lucide-react';

const VehiclesManagement: React.FC = () => {
Â  // Hook principal de gestiÃ³n
Â  const {
Â  Â  vehiculos,
Â  Â  vehiculosDisponibles,
Â  Â  vehiculosNoDisponibles,
Â  Â  loading,
Â  Â  error,
Â  Â  modalAgregarState,
Â  Â  modalDetallesState,
Â  Â  modalEditarState,
Â  Â  alertState,
Â  Â  abrirModalAgregar,
Â  Â  cerrarModalAgregar,
Â  Â  abrirModalDetalles,
Â  Â  cerrarModalDetalles,
Â  Â  abrirModalEditar,
Â  Â  cerrarModalEditar,
Â  Â  handleCreateVehiculo,
Â  Â  handleUpdateVehiculo,
Â  Â  handleDeleteVehiculo,
Â  Â  handleCambiarEstado,
Â  Â  refetch,
Â  } = useVehiclesManagement();

Â  // ðŸ”¹ Estado local para el modal de detalles (para actualizaciones en tiempo real)
Â  const [modalDetallesLocal, setModalDetallesLocal] = useState<{
Â  Â  isOpen: boolean;
Â  Â  vehiculo: Vehiculo | null;
Â  }>({
Â  Â  isOpen: false,
Â  Â  vehiculo: null,
Â  });

Â  // Estados locales para filtros
Â  const [filtroEstado, setFiltroEstado] = useState<EstadoVehiculo | 'todos'>('todos');
Â  const [filtroTipo, setFiltroTipo] = useState<TipoVehiculo | 'todos'>('todos');
Â  const [searchTerm, setSearchTerm] = useState('');

Â  /**
Â  Â * Abrir modal de detalles (versiÃ³n local mejorada)
Â  Â */
Â  const handleAbrirModalDetalles = (vehiculo: Vehiculo) => {
Â  Â  setModalDetallesLocal({ isOpen: true, vehiculo });
Â  Â  abrirModalDetalles(vehiculo); // TambiÃ©n llamar al hook
Â  };

Â  /**
Â  Â * Cerrar modal de detalles
Â  Â */
Â  const handleCerrarModalDetalles = () => {
Â  Â  setModalDetallesLocal({ isOpen: false, vehiculo: null });
Â  Â  cerrarModalDetalles(); // TambiÃ©n llamar al hook
Â  };

Â  /**
Â  Â * Manejar cambio de estado (actualiza tabla Y modal)
Â  Â */
Â  const handleCambiarEstadoCompleto = async (id: string, disponible: boolean) => {
Â  Â  // Ejecutar el cambio de estado
Â  Â  await handleCambiarEstado(id, disponible);

Â  Â  // ðŸ”¹ Actualizar el vehÃ­culo en el modal si estÃ¡ abierto
Â  Â  if (modalDetallesLocal.isOpen && modalDetallesLocal.vehiculo?.id_vehiculo === id) {
Â  Â  Â  setModalDetallesLocal(prev => ({
Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  vehiculo: prev.vehiculo ? {
Â  Â  Â  Â  Â  ...prev.vehiculo,
Â  Â  Â  Â  Â  estado_vehiculo: disponible
Â  Â  Â  Â  Â  Â  ? EstadoVehiculo.Disponible
Â  Â  Â  Â  Â  Â  : EstadoVehiculo.No_Disponible
Â  Â  Â  Â  } : null
Â  Â  Â  }));
Â  Â  }

Â  Â  // ðŸ”¹ Refrescar los datos para actualizar las estadÃ­sticas
Â  Â  await refetch();
Â  };

Â  /**
Â  Â * Aplicar filtros a la lista de vehÃ­culos
Â  Â */
Â  const vehiculosFiltrados = React.useMemo(() => {
Â  Â  let resultado = [...vehiculos];

Â  Â  // Filtrar por estado
Â  Â  if (filtroEstado !== 'todos') {
Â  Â  Â  resultado = resultado.filter(v => v.estado_vehiculo === filtroEstado);
Â  Â  }

Â  Â  // Filtrar por tipo
Â  Â  if (filtroTipo !== 'todos') {
Â  Â  Â  resultado = resultado.filter(v => v.tipo === filtroTipo);
Â  Â  }

Â  Â  // ðŸš€ BÃšSQUEDA ROBUSTA: Filtrar por bÃºsqueda con limpieza de caracteres
Â  Â  if (searchTerm.trim()) {
Â  Â  Â  // 1. Prepara el tÃ©rmino de bÃºsqueda: minÃºsculas y elimina caracteres no alfanumÃ©ricos
Â  Â  Â  const termLimpio = searchTerm.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();

Â  Â  Â  resultado = resultado.filter(
Â  Â  Â  Â  v => {
Â  Â  Â  Â  Â  // 2. ComprobaciÃ³n bÃ¡sica de existencia
Â  Â  Â  Â  Â  if (!v || !v.placa || !v.id_vehiculo) {
Â  Â  Â  Â  Â  Â  return false; 
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  // 3. Limpia y normaliza las propiedades del vehÃ­culo para la comparaciÃ³n
Â  Â  Â  Â  Â  const placaLimpia = String(v.placa).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  // ðŸŒŸ CAMBIO CLAVE: Usa String() para asegurar que id_vehiculo (que puede ser number en el JSON) se convierta correctamente
Â  Â  Â  Â  Â  const idLimpio = String(v.id_vehiculo).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  // 4. Compara los valores limpios
Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  placaLimpia.includes(termLimpio) ||
Â  Â  Â  Â  Â  Â  idLimpio.includes(termLimpio)
Â  Â  Â  Â  Â  );
Â  Â  Â  Â  }
Â  Â  Â  );
Â  Â  }
Â  Â  // ----------------------------------------------------------------------

Â  Â  return resultado;
Â  }, [vehiculos, filtroEstado, filtroTipo, searchTerm]);

Â  /**
Â  Â * Limpiar todos los filtros
Â  Â */
Â  const limpiarFiltros = () => {
Â  Â  setFiltroEstado('todos');
Â  Â  setFiltroTipo('todos');
Â  Â  setSearchTerm('');
Â  };

Â  /**
Â  Â * Contar vehÃ­culos por tipo
Â  Â */
Â  const contadorPorTipo = React.useMemo(() => {
Â  Â  return {
Â  Â  Â  moto: vehiculos.filter(v => v.tipo === TipoVehiculo.Moto).length,
Â  Â  Â  camioneta: vehiculos.filter(v => v.tipo === TipoVehiculo.Camioneta).length,
Â  Â  Â  furgon: vehiculos.filter(v => v.tipo === TipoVehiculo.Furgon).length,
Â  Â  Â  camion: vehiculos.filter(v => v.tipo === TipoVehiculo.Camion).length,
Â  Â  };
Â  }, [vehiculos]);

Â  return (
Â  Â  <div className="container mx-auto px-4 py-8">
Â  Â  Â  {/* Header */}
Â  Â  Â  <div className="mb-8">
Â  Â  Â  Â  <div className="flex items-center justify-between mb-4">
Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  <h1 className="text-3xl font-bold text-gray-900 dark:text-white flex items-center gap-3">
Â  Â  Â  Â  Â  Â  Â  <Truck className="w-8 h-8 text-blue-500" />
Â  Â  Â  Â  Â  Â  Â  GestiÃ³n de VehÃ­culos
Â  Â  Â  Â  Â  Â  </h1>
Â  Â  Â  Â  Â  Â  <p className="text-gray-600 dark:text-gray-400 mt-2">
Â  Â  Â  Â  Â  Â  Â  Administra los vehÃ­culos de tu flota
Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  variant="primary"
Â  Â  Â  Â  Â  Â  onClick={abrirModalAgregar}
Â  Â  Â  Â  Â  Â  className="flex items-center gap-2"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <Plus className="w-5 h-5" />
Â  Â  Â  Â  Â  Â  Agregar VehÃ­culo
Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* Alertas */}
Â  Â  Â  {alertState.show && alertState.msg && (
Â  Â  Â  Â  <Alert
Â  Â  Â  Â  Â  variant={alertState.type || 'info'}
Â  Â  Â  Â  Â  title={
Â  Â  Â  Â  Â  Â  alertState.type === 'success'
Â  Â  Â  Â  Â  Â  Â  ? 'Ã‰xito'
Â  Â  Â  Â  Â  Â  Â  : alertState.type === 'error'
Â  Â  Â  Â  Â  Â  Â  ? 'Error'
Â  Â  Â  Â  Â  Â  Â  : alertState.type === 'warning'
Â  Â  Â  Â  Â  Â  Â  ? 'Advertencia'
Â  Â  Â  Â  Â  Â  Â  : 'InformaciÃ³n'
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  message={alertState.msg}
Â  Â  Â  Â  Â  className="mb-6"
Â  Â  Â  Â  />
Â  Â  Â  )}

Â  Â  Â  {/* EstadÃ­sticas */}
Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
Â  Â  Â  Â  {/* Total de vehÃ­culos */}
Â  Â  Â  Â  <div className="bg-white dark:bg-gray-800 rounded-lg shadow-theme-sm border border-gray-200 dark:border-gray-700 p-6">
Â  Â  Â  Â  Â  <div className="flex items-center justify-between">
Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-600 dark:text-gray-400">Total VehÃ­culos</p>
Â  Â  Â  Â  Â  Â  Â  <p className="text-2xl font-bold text-gray-900 dark:text-white mt-1">
Â  Â  Â  Â  Â  Â  Â  Â  {vehiculos.length}
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="p-3 bg-blue-500/10 rounded-lg">
Â  Â  Â  Â  Â  Â  Â  <Truck className="w-6 h-6 text-blue-500" />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* VehÃ­culos disponibles */}
Â  Â  Â  Â  <div className="bg-white dark:bg-gray-800 rounded-lg shadow-theme-sm border border-gray-200 dark:border-gray-700 p-6">
Â  Â  Â  Â  Â  <div className="flex items-center justify-between">
Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-600 dark:text-gray-400">Disponibles</p>
Â  Â  Â  Â  Â  Â  Â  <p className="text-2xl font-bold text-green-600 dark:text-green-500 mt-1">
Â  Â  Â  Â  Â  Â  Â  Â  {vehiculosDisponibles.length}
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="p-3 bg-green-500/10 rounded-lg">
Â  Â  Â  Â  Â  Â  Â  <svg className="w-6 h-6 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
Â  Â  Â  Â  Â  Â  Â  Â  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
Â  Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* VehÃ­culos no disponibles */}
Â  Â  Â  Â  <div className="bg-white dark:bg-gray-800 rounded-lg shadow-theme-sm border border-gray-200 dark:border-gray-700 p-6">
Â  Â  Â  Â  Â  <div className="flex items-center justify-between">
Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-600 dark:text-gray-400">No Disponibles</p>
Â  Â  Â  Â  Â  Â  Â  <p className="text-2xl font-bold text-red-600 dark:text-red-500 mt-1">
Â  Â  Â  Â  Â  Â  Â  Â  {vehiculosNoDisponibles.length}
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="p-3 bg-red-500/10 rounded-lg">
Â  Â  Â  Â  Â  Â  Â  <svg className="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
Â  Â  Â  Â  Â  Â  Â  Â  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
Â  Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Tipo mÃ¡s comÃºn */}
Â  Â  Â  Â  <div className="bg-white dark:bg-gray-800 rounded-lg shadow-theme-sm border border-gray-200 dark:border-gray-700 p-6">
Â  Â  Â  Â  Â  <div className="flex items-center justify-between">
Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-600 dark:text-gray-400">Tipo mÃ¡s comÃºn</p>
Â  Â  Â  Â  Â  Â  Â  <p className="text-2xl font-bold text-gray-900 dark:text-white mt-1">
Â  Â  Â  Â  Â  Â  Â  Â  {contadorPorTipo.moto >= Math.max(contadorPorTipo.camioneta, contadorPorTipo.furgon, contadorPorTipo.camion)
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'Moto'
Â  Â  Â  Â  Â  Â  Â  Â  Â  : contadorPorTipo.camioneta >= Math.max(contadorPorTipo.furgon, contadorPorTipo.camion)
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'Camioneta'
Â  Â  Â  Â  Â  Â  Â  Â  Â  : contadorPorTipo.furgon >= contadorPorTipo.camion
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'FurgÃ³n'
Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'CamiÃ³n'}
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="p-3 bg-purple-500/10 rounded-lg">
Â  Â  Â  Â  Â  Â  Â  <Filter className="w-6 h-6 text-purple-500" />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* Filtros */}
Â  Â  Â  <form 
Â  Â  Â  Â  className="bg-white dark:bg-gray-800 rounded-lg shadow-theme-sm border border-gray-200 dark:border-gray-700 p-4 mb-6"
Â  Â  Â  Â  // SoluciÃ³n 1: Prevenir el envÃ­o de formulario para evitar recargas
Â  Â  Â  Â  onSubmit={(e) => e.preventDefault()} 
Â  Â  Â  >
Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
Â  Â  Â  Â  Â  {/* BÃºsqueda */}
Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
Â  Â  Â  Â  Â  Â  Â  Buscar
Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  value={searchTerm}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setSearchTerm(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  placeholder="Placa o ID..."
Â  Â  Â  Â  Â  Â  Â  className="w-full h-10 px-4 rounded-lg border border-gray-300 dark:border-gray-600 dark:bg-gray-700 text-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Filtro por estado */}
Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
Â  Â  Â  Â  Â  Â  Â  Estado
Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  value={filtroEstado}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setFiltroEstado(e.target.value as EstadoVehiculo | 'todos')}
Â  Â  Â  Â  Â  Â  Â  className="w-full h-10 px-4 rounded-lg border border-gray-300 dark:border-gray-600 dark:bg-gray-700 text-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <option value="todos">Todos</option>
Â  Â  Â  Â  Â  Â  Â  <option value={EstadoVehiculo.Disponible}>Disponibles</option>
Â  Â  Â  Â  Â  Â  Â  <option value={EstadoVehiculo.No_Disponible}>No Disponibles</option>
Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Filtro por tipo */}
Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
Â  Â  Â  Â  Â  Â  Â  Tipo
Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  value={filtroTipo}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setFiltroTipo(e.target.value as TipoVehiculo | 'todos')}
Â  Â  Â  Â  Â  Â  Â  className="w-full h-10 px-4 rounded-lg border border-gray-300 dark:border-gray-600 dark:bg-gray-700 text-sm focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <option value="todos">Todos</option>
Â  Â  Â  Â  Â  Â  Â  <option value={TipoVehiculo.Moto}>Moto</option>
Â  Â  Â  Â  Â  Â  Â  <option value={TipoVehiculo.Camioneta}>Camioneta</option>
Â  Â  Â  Â  Â  Â  Â  <option value={TipoVehiculo.Furgon}>FurgÃ³n</option>
Â  Â  Â  Â  Â  Â  Â  <option value={TipoVehiculo.Camion}>CamiÃ³n</option>
Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* BotÃ³n limpiar filtros */}
Â  Â  Â  Â  Â  <div className="flex items-end">
Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  variant="outline"
Â  Â  Â  Â  Â  Â  Â  onClick={limpiarFiltros}
Â  Â  Â  Â  Â  Â  Â  className="w-full"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Limpiar Filtros
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Indicador de resultados */}
Â  Â  Â  Â  <div className="mt-4 text-sm text-gray-600 dark:text-gray-400">
Â  Â  Â  Â  Â  Mostrando {vehiculosFiltrados.length} de {vehiculos.length} vehÃ­culos
Â  Â  Â  Â  </div>
Â  Â  Â  </form>

Â  Â  Â  {/* Tabla de vehÃ­culos */}
Â  Â  Â  {loading ? (
Â  Â  Â  Â  <div className="flex justify-center items-center py-12">
Â  Â  Â  Â  Â  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
Â  Â  Â  Â  </div>
Â  Â  Â  ) : error ? (
Â  Â  Â  Â  <Alert
Â  Â  Â  Â  Â  variant="error"
Â  Â  Â  Â  Â  title="Error"
Â  Â  Â  Â  Â  message={error}
Â  Â  Â  Â  Â  className="mb-6"
Â  Â  Â  Â  />
Â  Â  Â  ) : (
Â  Â  Â  Â  <TablaVehiculos
Â  Â  Â  Â  Â  vehiculos={vehiculosFiltrados}
Â  Â  Â  Â  Â  onVerDetalles={handleAbrirModalDetalles}
Â  Â  Â  Â  Â  onEditar={abrirModalEditar}
Â  Â  Â  Â  Â  onEliminar={handleDeleteVehiculo}
Â  Â  Â  Â  Â  onCambiarEstado={handleCambiarEstadoCompleto}
Â  Â  Â  Â  />
Â  Â  Â  )}

Â  Â  Â  {/* Modales */}
Â  Â  Â  <ModalAgregarVehiculo
Â  Â  Â  Â  isOpen={modalAgregarState.isOpen}
Â  Â  Â  Â  onClose={cerrarModalAgregar}
Â  Â  Â  Â  onSuccess={handleCreateVehiculo}
Â  Â  Â  Â  isLoading={modalAgregarState.isLoading}
Â  Â  Â  />

Â  Â  Â  <ModalDetallesVehiculo
Â  Â  Â  Â  isOpen={modalDetallesLocal.isOpen}
Â  Â  Â  Â  onClose={handleCerrarModalDetalles}
Â  Â  Â  Â  vehiculo={modalDetallesLocal.vehiculo}
Â  Â  Â  />

Â  Â  Â  <ModalEditarVehiculo
Â  Â  Â  Â  isOpen={modalEditarState.isOpen}
Â  Â  Â  Â  onClose={cerrarModalEditar}
Â  Â  Â  Â  onSuccess={handleUpdateVehiculo}
Â  Â  Â  Â  vehiculo={modalEditarState.vehiculo}
Â  Â  Â  Â  isLoading={modalEditarState.isLoading}
Â  Â  Â  />
Â  Â  </div>
Â  );
};

export default VehiclesManagement;